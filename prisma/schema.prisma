generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int               @id @default(autoincrement())
  studentId  String            @unique
  firstName  String
  lastName   String
  email      String            @unique
  picture    String?
  role       Role              @default(MEMBER)
  souce      Souce[]
  Permission Permission[]
  Appication Appication[]
  Workspaces UserOfWorkspace[]
  Invite     Invite[]
}

model Souce {
  id        Int          @id @default(autoincrement())
  installID String       @unique
  User      User?        @relation(fields: [userId], references: [id])
  userId    Int?
  usedIn    Appication[]
}

model Workspace {
  id         Int               @id @default(autoincrement())
  name       String
  slug       String            @unique
  permission Permission[]
  Appication Appication[]
  Database   Database[]
  Members    UserOfWorkspace[]
  Invite     Invite[]
}

model Appication {
  id          Int       @id @default(autoincrement())
  name        String
  gitHub      String
  branch      String
  buildPack   String
  config      Json
  createBy    User      @relation(fields: [userId], references: [id])
  userId      Int
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  Souce       Souce?    @relation(fields: [souceId], references: [id])
  souceId     Int
  status      Status    @default(notStarted)
  logs        Json
  url         String
}

model Database {
  id          Int        @id @default(autoincrement())
  name        String
  images      String
  config      Json
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId Int?
}

model Permission {
  id          Int        @id @default(autoincrement())
  role        Role
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int?
}

model UserOfWorkspace {
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int

  @@id([userId, workspaceId])
}

model Invite {
  id          Int       @id @default(autoincrement())
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  toUser      User?     @relation(fields: [toUserId], references: [id])
  toUserId    Int?
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum Status {
  notStarted
  inProgress
  Deployed
  Failed
}
